paths:
  /user/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account and receive a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - userName
                - email
                - password
                - passwordConfirm
              properties:
                firstName:
                  type: string
                  example: Sarah
                lastName:
                  type: string
                  example: Lee
                userName:
                  type: string
                  example: sarahlee
                email:
                  type: string
                  format: email
                  example: sarah.lee@email.com
                password:
                  type: string
                  format: password
                  example: MySecret123
                passwordConfirm:
                  type: string
                  format: password
                  example: MySecret123
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                    description: JWT token
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          description: Username or email already in use
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user/login:
    post:
      tags:
        - Authentication
      summary: Log in a user
      description: Authenticate with userName or email + password and receive a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - required: [userName, password]
                - required: [email, password]
              properties:
                userName:
                  type: string
                  example: sarahlee
                email:
                  type: string
                  format: email
                  example: sarah.lee@email.com
                password:
                  type: string
                  format: password
                  example: MySecret123
      responses:
        "200":
          description: Logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user/logout:
    get:
      tags:
        - Authentication
      summary: Log out current user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /user/updateMe:
    patch:
      tags:
        - User
      summary: Update current user's profile
      description: Modify only username or bio of the authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        description: Fields to update (username and/or bio)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: sarahlee
                bio:
                  type: string
                  example: "I love hiking and photography."
      responses:
        "200":
          description: User profile updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /user/updatePassword:
    patch:
      tags:
        - User
      summary: Update current user's password
      description: Change password by providing currentPassword, newPassword, newPasswordConfirm.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
                - newPasswordConfirm
              properties:
                currentPassword:
                  type: string
                  format: password
                  example: OldPass456
                newPassword:
                  type: string
                  format: password
                  example: NewPass789
                newPasswordConfirm:
                  type: string
                  format: password
                  example: NewPass789
      responses:
        "200":
          description: Password updated and user relogged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /user/{id}/follow:
    post:
      tags:
        - User
      summary: Follow or unfollow another user
      description: Toggles follow state for the authenticated user against the target user.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The ObjectId of the user to follow or unfollow
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Follow/unfollow action result
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: You have followed sarahlee
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /user/{id}/posts:
    get:
      tags:
        - User
      summary: Get posts by user
      description: Retrieve posts created by a specific user, sorted by newest first. Supports pagination.
      parameters:
        - name: id
          in: path
          required: true
          description: The ObjectId of the user whose posts to fetch
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: "Page number for pagination (default: 1)"
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: List of user's posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  results:
                    type: integer
                    example: 15
                  page:
                    type: integer
                    example: 1
                  data:
                    type: object
                    properties:
                      posts:
                        type: array
                        items:
                          $ref: "#/components/schemas/Post"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
